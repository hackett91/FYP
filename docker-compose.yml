################################################################################
# docker stack deploy node-red --compose-file docker-compose-node-red.yml
# docker-compose -f docker-compose-node-red.yml -p myNoderedProject up
################################################################################
version: "3.7"

services:
  node-red:
    image: hackett91/nodered-kafka:0.0.2
    environment:
      - TZ=Europe/Amsterdam
    ports:
      - "1880:1880"
    networks:
      - node-red-net
    volumes:
      - node-red-data
  grafana:
      image: grafana/grafana
      container_name: grafana
      restart: always
      ports:
        - 3000:3000
      networks:
        - monitoring
      volumes:
        - grafana-volume:/var/lib/grafana
  influxdb:
      image: influxdb
      container_name: influxdb
      restart: always
      ports:
        - 8086:8086
      networks:
        - monitoring
      volumes:
        - influxdb-volume:/var/lib/influxdb
volumes:
  grafana-volume:
    external: true
  influxdb-volume:
    external: true
  node-red-data:
networks:
  node-red-net:
  monitoring:
  # mosquitto:
  #   image: eclipse-mosquitto
  #   hostname: mosquitto
  #   container_name: mosquitto
  #   expose:
  #     - "1883"
  #     - "9001"
  #   ports:
  #     - "1883:1883"
  #     - "9001:9001"
  #   # volumes:
  #   #   - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  #   networks:
  #     - default
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:5.3.1
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #
  # kakfa:
  #   image: confluentinc/cp-enterprise-kafka:5.3.1
  #   hostname: kafka
  #   container_name: kakfa
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kakfa:29092
  #     CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
  #     CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #     CONFLUENT_METRICS_ENABLE: 'true'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:5.1.0
  #   hostname: kafka-connect
  #   container_name: kafka-connect
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: "192.168.1.7:9092"
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
  #     CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - /tmp/custom/jars:/etc/kafka-connect/jars
  #   depends_on:
  #     - zookeeper
  #     - kakfa
  #     - mosquitto
